# Base compose file defining services and their settings
# For concrete images check the environment specific override files.
version: '3.9'

x-env-mysql: &env-mysql
  MYSQL_DATABASE: ${MYSQL_DATABASE}
  MYSQL_USER: ${MYSQL_USER}
  MYSQL_PASSWORD: ${MYSQL_PASSWORD}

x-env-logging-conf: &env-logging-conf
  max-size: "200m"
  max-file: "10"

services:
  traefik:
    container_name: testcenter-traefik
    image: traefik:v2.10
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - "${PORT:-80}:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      testcenter:

  testcenter-db:
    container_name: testcenter-db
    image: iqbberlin/testcenter-db:current
    environment:
      <<: *env-mysql
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_INITDB_SKIP_TZINFO: 'true'
    expose:
      - "22"
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      testcenter:

  testcenter-backend:
    container_name: testcenter-backend
    image: iqbberlin/testcenter-backend:current
    environment:
      <<: *env-mysql
      MYSQL_HOST: testcenter-db
      MYSQL_PORT: 3306
      PASSWORD_SALT: ${PASSWORD_SALT}
      BROADCAST_SERVICE_ENABLED: ${BROADCAST_SERVICE_ENABLED}
      FILE_SERVICE_ENABLED: ${FILE_SERVICE_ENABLED}
      HOSTNAME: ${HOSTNAME}
      TLS_ENABLED: ${TLS_ENABLED:-off}
      CACHE_SERVICE_INCLUDE_FILES: ${CACHE_SERVICE_INCLUDE_FILES:-off}
      CACHE_SERVICE_RAM: ${CACHE_SERVICE_RAM}
      PORT: ${PORT:-80}
      TLS_PORT: ${TLS_PORT:-443}
    logging:
      options:
        <<: *env-logging-conf
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.testcenter-backend.rule=(HostRegexp(`{[a-z]*}.${HOSTNAME}`) || Host(`${HOSTNAME}`)) && PathPrefix(`/api`)"
      - "traefik.http.middlewares.testcenter-backend-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.middlewares.security-headers-backend.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers-backend.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.routers.testcenter-backend.middlewares=testcenter-backend-stripprefix, security-headers-backend"
    volumes:
      - testcenter_backend_vo_data:/var/www/data
    networks:
      testcenter:

  testcenter-file-service:
    container_name: testcenter-file-service
    image: iqbberlin/testcenter-file-service:current
    environment:
      CACHE_SERVICE_INCLUDE_FILES: ${CACHE_SERVICE_INCLUDE_FILES:-off}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.testcenter-file-service.rule=(HostRegexp(`{[a-z]*}.${HOSTNAME}`) || Host(`${HOSTNAME}`)) && PathPrefix(`/fs`)"
      - "traefik.http.middlewares.testcenter-file-service-stripprefix.stripprefix.prefixes=/fs"
      - "traefik.http.middlewares.security-headers-fs.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers-fs.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.routers.testcenter-file-service.middlewares=testcenter-file-service-stripprefix, security-headers-fs"
    volumes:
      - testcenter_backend_vo_data:/var/www/html/
    networks:
      testcenter:

  testcenter-cache-service:
    container_name: testcenter-cache-service
    image: redis:7.0-bullseye
    command:
      - "bash"
      - "-c"
      - "redis-server --maxmemory ${CACHE_SERVICE_RAM-1073741824} --maxmemory-policy volatile-lru"
    networks:
      testcenter:

  testcenter-frontend:
    container_name: testcenter-frontend
    image: iqbberlin/testcenter-frontend:current
    logging:
      options:
        <<: *env-logging-conf
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.testcenter-frontend.rule=HostRegexp(`{[a-z]*}.${HOSTNAME}`) || Host(`${HOSTNAME}`)"
      - "traefik.http.middlewares.security-headers-frontend.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers-frontend.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.routers.testcenter-frontend.middlewares=security-headers-frontend"
    networks:
      testcenter:

  testcenter-broadcasting-service:
    container_name: testcenter-broadcasting-service
    image: iqbberlin/testcenter-broadcasting-service:current
    logging:
      options:
        <<: *env-logging-conf
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.testcenter-broadcasting-service.rule=(HostRegexp(`{[a-z]*}.${HOSTNAME}`) || Host(`${HOSTNAME}`)) && PathPrefix(`/bs/public`)"
      - "traefik.http.middlewares.testcenter-broadcasting-service-stripprefix.stripprefix.prefixes=/bs/public"
      - "traefik.http.middlewares.security-headers-bs.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers-bs.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.routers.testcenter-broadcasting-service.middlewares=testcenter-broadcasting-service-stripprefix, security-headers-bs"
    networks:
      testcenter:

volumes:
  dbdata:
  testcenter_backend_vo_data:

networks:
  testcenter:
    name: testcenter
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: ${DOCKER_DAEMON_MTU:-1500}
